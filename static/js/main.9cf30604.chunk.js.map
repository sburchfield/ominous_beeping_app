{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["a","AudioContext","beep","vol","freq","duration","v","createOscillator","u","createGain","connect","frequency","value","type","destination","gain","start","currentTime","stop","flash","$","css","setTimeout","doStuff","hide","setInterval","App","className","onClick","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAIMA,G,MAAE,IAAIC,cAOZ,SAASC,EAAKC,EAAKC,EAAMC,GACvB,IAAIC,EAAEN,EAAEO,mBACJC,EAAER,EAAES,aACRH,EAAEI,QAAQF,GACVF,EAAEK,UAAUC,MAAMR,EAClBE,EAAEO,KAAK,SACPL,EAAEE,QAAQV,EAAEc,aACZN,EAAEO,KAAKH,MAAU,IAAJT,EACbG,EAAEU,MAAMhB,EAAEiB,aACVX,EAAEY,KAAKlB,EAAEiB,YAAqB,KAATZ,GAGvB,SAASc,IAEPC,IAAE,aAAaC,IAAI,aAAc,WACjCC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,YAAY,KAEnEC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,aAAa,IACpEC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,YAAY,KAEnEC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,aAAa,KACpEC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,YAAY,KAEnEC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,aAAa,KACpEC,YAAW,WAAWF,IAAE,aAAaC,IAAI,aAAc,YAAY,KAIrE,SAASE,IACPH,IAAE,YAAYI,OACdJ,IAAE,UAAUC,IAAI,aAAc,UAE9BnB,EApCW,GACG,IACD,IAoCbuB,aAAY,WAAYvB,EAtCb,GACG,IACD,MAHC,KAyCdiB,IAEcM,aAAY,WAAQN,MA5CnB,KAiFFO,MAvBf,WACE,OACE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,qBAIjB,4BAAQC,QAASL,GAAjB,QAEA,yBAAKI,UAAU,gBACb,wBAAIE,MAAO,CAACC,MAAO,YAAnB,WACA,wBAAID,MAAO,CAACC,MAAO,YAAnB,WACA,wBAAID,MAAO,CAACC,MAAO,YAAnB,UCpEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9cf30604.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport './App.css';\n\nconst a=new AudioContext()\nlet flashspeed = 1000\nlet beepSpeed = 1000\nlet volume = 15\nlet frequency = 820\nlet duration = 50\n\nfunction beep(vol, freq, duration){\n  let v=a.createOscillator()\n  let u=a.createGain()\n  v.connect(u)\n  v.frequency.value=freq\n  v.type=\"square\"\n  u.connect(a.destination)\n  u.gain.value=vol*0.01\n  v.start(a.currentTime)\n  v.stop(a.currentTime+duration*0.001)\n}\n\nfunction flash(){\n\n  $(\".circle-1\").css('visibility', 'visible');\n  setTimeout(function(){$(\".circle-1\").css('visibility', 'hidden')}, 200)\n\n  setTimeout(function(){$(\".circle-2\").css('visibility', 'visible')}, 75)\n  setTimeout(function(){$(\".circle-2\").css('visibility', 'hidden')}, 250)\n\n  setTimeout(function(){$(\".circle-3\").css('visibility', 'visible')}, 100)\n  setTimeout(function(){$(\".circle-3\").css('visibility', 'hidden')}, 300)\n\n  setTimeout(function(){$(\".circle-4\").css('visibility', 'visible')}, 125)\n  setTimeout(function(){$(\".circle-4\").css('visibility', 'hidden')}, 350)\n\n}\n\nfunction doStuff(){\n  $(\".overlay\").hide();\n  $(\"button\").css('visibility', 'hidden')\n\n  beep(volume, frequency, duration)\n\n  setInterval(function(){ beep(volume, frequency, duration)}, beepSpeed )\n\n  flash()\n\n  let flashID = setInterval(() => { flash() }, flashspeed)\n\n\n  // setInterval(function(){\n  //\n  //   flashspeed = flashspeed + 500;\n  //\n  //   console.log(flashID);\n  //   clearInterval(flashID)\n  //\n  // }, 1000)\n\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"overlay\"></div>\n      <div className=\"circleWrapper\">\n        <div className=\"circle circle-4\"></div>\n        <div className=\"circle circle-3\"></div>\n        <div className=\"circle circle-2\"></div>\n        <div className=\"circle circle-1\"></div>\n      </div>\n\n\n      <button onClick={doStuff}>Play</button>\n\n      <div className=\"titleWrapper\">\n        <h1 style={{color: '#DDF1F0'}}>Ominous</h1>\n        <h1 style={{color: '#B1D8D7'}}>Beeping</h1>\n        <h1 style={{color: '#7EB5B3'}}>App</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}